import Head from 'next/head'
import Image from 'next/image'
import { Inter } from '@next/font/google'
import Layout from '@components/Containers/Layout';
import { Button } from '@windmill/react-ui'
import { useState,useEffect,useRef } from 'react';
import { useRouter } from 'next/router';
import { get_REAL_TIME_DB_BASE } from '@utils/constants/db_constants';
import { CrossIcon, TrashIcon,AdminIcon,FarmerIcon,WomenDayIcon } from '@icons'
import {initFirebase} from "@lib/firebase_db/firebase_init";
import { getDatabase, ref,onValue,set,push} from "firebase/database";
import { child, get, query, orderByChild} from "firebase/database";
import { USERMODEL } from '@models/db_model';
import { REALTIME_DATABASE_DB_USERS_PATH } from '@utils/constants/db_constants';
import AdminDisplayer  from '@components/Dashboard/AdminDisplayer';
import { useAuth } from '@context/auth';
import { userOnlyHasReadRights } from '@utils/functions/utils_functions';
import { UNAUTHORISED_WRITE_ACCESS_MESSAGE } from '@utils/constants/warning_constants';


const inter = Inter({ subsets: ['latin'] })

export default function Admins() {
  const router = useRouter();
  const DB_BASE_PATH=get_REAL_TIME_DB_BASE(router.pathname);
  const {user,dbuser,userLoading} = useAuth();
  const [ effectCalmer,setEffectCalmer]=useState(null);
  const [ adminsList, setAdminsList] = useState<USERMODEL[]>([]);
  const initialAdminsList = useRef<USERMODEL[]>([]);

  useEffect(() => {
    // listening for changes in product cart
    // console.log(user);
     (async () => {
         if(true){
             initFirebase();
             const db = getDatabase();

             const orderedRef = query(ref(db,REALTIME_DATABASE_DB_USERS_PATH), orderByChild('dateCreated'));
             //const cartProdRef = ref(db,DB_BASE_PATH);

             onValue(orderedRef, (snapshot) => {
               //console.log(data);
               //const data = snapshot.val();
               //console.log(data);
               let tempList:USERMODEL[]=[];
               snapshot.forEach((child)=>{
                let kidValue=child.val();
                console.log(kidValue);
                tempList.push(kidValue);
               })

               tempList=tempList.reverse();

               if (JSON.stringify(tempList) !== JSON.stringify(initialAdminsList.current)) {
                setAdminsList(tempList);
                initialAdminsList.current = tempList;
               }
               //setWeatherUpdatesList(tempList);
             });
         }
     })();

},[effectCalmer]);


  return (
    <Layout>

      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>


    <main className="">
      
      {/* Container */}
      <div className="mx-5 mt-3">

        {/* List of farmers */ }
        {adminsList.length>0  && (
          <div className=''>
            <div className='mb-5 text-xl font-bold dark:text-white'>List of Adminstrators</div>
            <AdminDisplayer adminsList={adminsList} dbuser={dbuser}/>
          </div>
        )}

        {/*if List of farmers if empty */}
        {adminsList.length===0 && (
          <div className=''>
            <div className='h-[500px] flex items-center justify-center'>
              <div className='mt-10 flex flex-col items-center justify-center'>
                <div className='font-medium'>
                  No Registered Adminstrators Yet
                </div>
                <div>
                  <AdminIcon className="h-[200px] w-[300px]"/>
                </div>
              </div>
            </div>
          </div>
        )}

      </div>
      {/* End of Container */}

    </main>

    </Layout>
  )
}

